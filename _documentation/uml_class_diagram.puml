@startuml
allowmixing

' Backend Controllers
class UsersController {
  + register(Request): Response
  + login(Request): Response
  + logout(Request): Response
}

class MoviesController {
  + getMovies(Request): Response
  + getMovieDetails(int id): Response
  + addReview(Request): Response
  + rateMovie(Request): Response
}

' Database Entities
class User {
  - id: int
  - name: string
  - email: string
  - password: string
  - profile_picture: string?
  - registration_date: datetime
}

class Movie {
  - id: int
  - type: enum
  - title: string
  - director_id: int?
  - writer_id: int?
  - category_id: int?
  - studio_id: int?
  - description: text
  - release_year: year
  - cover_image_url: string
  - netflix_link: string?
  - hbo_link: string?
}

class Review {
  - id: int
  - user_id: int
  - movie_id: int
  - review_text: text
  - date: datetime
}

class Person {
  - id: int
  - name: string
  - bio: text?
  - birthdate: date?
  - profile_picture: string?
}

class Studio {
  - id: int
  - name: string
}

class Category {
  - id: int
  - name: string
}

class MovieActor {
  - movie_id: int
  - actor_id: int
}

' Frontend Components
component "Signin.vue"
component "Signup.vue"
component "MovieDetail.vue"
component "Searchbar.vue"

' Relationships between entities
User --> Review : "writes"
Movie --> Review : "has"
Person --> Movie : "associated with"
Category --> Movie : "categorizes"
Studio --> Movie : "produces"
MovieActor --> Movie : "links actors"
MovieActor --> Person : "links actors"

' Frontend-Backend interactions
Signin.vue --> UsersController : "calls login"
Signup.vue --> UsersController : "calls register"
MovieDetail.vue --> MoviesController : "calls getMovieDetails, addReview, rateMovie"
Searchbar.vue --> MoviesController : "calls getMovies"

@enduml